version: 2

# A reusable "run" snippet which is ran before each test to setup the
# environment for user-limits, core-dumps, etc.
run_env_change: &run_env_change
  name: Environment Changes
  command: |
    # Make a place to core dumps to live.
    sudo mkdir -p /tmp/core_dumps
    sudo chmod a+rwx /tmp/core_dumps

    # Bake the locale we expect into the image.
    echo "en_US.UTF-8 UTF-8" | sudo tee /etc/locale.gen
    sudo locale-gen

    # The commands below don't work in Docker images, but might be worth
    # reenabling if we switch back to machine:true instead of Docker.

    # Set the pattern for core dumps, so we can find them.
    # echo kernel.core_pattern="/tmp/core_dumps/core.%e.%p.%h.%t" | \
    #     sudo tee -a /etc/sysctl.conf

    # Note that since every "run" command starts its own shell, and I wasn't
    # able to set this at a system wide level for all users, it's necessary to
    # run "ulimit -c unlimited" before each command which you want to (possibly)
    # output a core dump.

    # Raise inotify user watches up higher.
    # echo fs.inotify.max_user_watches=524288 | \
    #     sudo tee -a /etc/sysctl.conf

    # Reload sysctl so these are in effect.
    # sudo sysctl -p

# A reusable "run" snippet which enables the continued logging of memoryusage
# to a file on disk which can be saved to build artifacts for later analysis.
run_log_mem_use: &run_log_mem_use
  background: true
  name: Setup Memory Logging
  command: |
    # Log memory usage throughout entire build.
    MEMUSELOG=/tmp/memuse.txt /bin/bash -c '\
        while true; do\
          ps -u $USER -e -o pid,%cpu,%mem,rss:10,vsz:10,command:20 \
            --sort=-%mem >> $MEMUSELOG; \
          echo "----------" >> $MEMUSELOG; \
          sleep 1; \
        done'

# For whatever reason, the segfault signal doesn't happen when building from source.
really_fail_if_core: &really_fail_if_core
  name: Check for Core Dump
  command: |
    if compgen -G "/tmp/core_dumps/core.*" > /dev/null; then
      echo "There's a core dump! Fail the build which hasn't failed yet!"

      # fail the build!
      false
    fi

# A reusable "run" snippet for saving the Node binary if a core dump is present.
run_save_node_bin: &run_save_node_bin
  name: Save Node Binary
  when: on_fail
  command: |
    if compgen -G "/tmp/core_dumps/core.*" > /dev/null; then
      echo "Saving Node binary since Core dump is present..."
      cp dev_bundle/bin/node /tmp/core_dumps/node
    fi

# This environment is set to every job (and the initial build).
build_machine_environment: &build_machine_environment
  # Specify that we want an actual machine (ala Circle 1.0), not a Docker image.
  docker:
    - image: circleci/node
  environment:
    # This multiplier scales the waitSecs for selftests.
    TIMEOUT_SCALE_FACTOR: 8

    # Retry failed tests additional times.
    METEOR_SELF_TEST_RETRIES: 2

    # These, mostly overlapping, flags ensure that CircleCI is as pretty as
    # possible for a non-interactive environment.  See also: --headless.
    METEOR_HEADLESS: true
    METEOR_PRETTY_OUTPUT: 0

    # In an effort to stop SIGSEGV, this just doesn't bother cleaning up
    # the mess of temp directories that Meteor makes.
    METEOR_SAVE_TMPDIRS: 1

    # Skip these tests on every test run.
    # If needed, for readability this should be a regex wrapped across
    # multiple lines in quotes.
    SELF_TEST_EXCLUDE: "add debugOnly and prodOnly packages"

    # These will be evaled before each command.
    PRE_TEST_COMMANDS: |-
        ulimit -c unlimited; # Set core dump size as Ubuntu 14.04 lacks prlimit.
        ulimit -n 4096; # CircleCI default is soft 1024, hard 4096. Take it all.

    # Enable the Garbage Collection `gc` object to be exposed so we can try
    # to our own, hopefully more graceful, technique.
    TOOL_NODE_FLAGS: --expose-gc

    # This is only to make Meteor self-test not remind us that we can set
    # this argument for self-tests.
    SELF_TEST_TOOL_NODE_FLAGS: " "

jobs:
  Get Ready:
    <<: *build_machine_environment
    steps:
      - run:
          <<: *run_log_mem_use
      - run:
          <<: *run_env_change
      - checkout
      - run:
          # https://discuss.circleci.com/t/git-submodule-url-isnt-playing-nice-with-the-cache/549/3
          name: Git Submodules.
          command: (git submodule sync && git submodule update --init --recursive) || (rm -fr .git/config .git/modules && git submodule deinit -f . && git submodule update --init --recursive)
      - run:
          name: Create Test Results Directory
          command: |
            sudo mkdir -p ./tmp/results/junit
            sudo chmod a+rwx ./tmp/results/junit
      - run:
          name: Generate Dev Bundle
          command: |
            rm -rf dev_bundle/
            ./scripts/generate-dev-bundle.sh
      - run:
          name: Meteor Version
          command: |
            eval $PRE_TEST_COMMANDS;
            ./meteor --version || /bin/true
      - run:
          name: Clear npm cache
          command: ./meteor npm cache clear --force
      - run:
          <<: *really_fail_if_core
      - run:
          <<: *run_save_node_bin
      - persist_to_workspace:
          root: .
          paths: .
      - store_artifacts:
          path: /tmp/core_dumps
      - store_artifacts:
          path: /tmp/memuse.txt

  SegFaultPlz:
    <<: *build_machine_environment
    steps:
      - run:
          <<: *run_log_mem_use
      - run:
          <<: *run_env_change
      - attach_workspace:
          at: .
      - run:
          name: "Print environment"
          command: printenv
      - run:
          name: Node Config & Versions
          command: |
            eval $PRE_TEST_COMMANDS;
            ./dev_bundle/bin/node -p process.config
            ./dev_bundle/bin/node -p process.versions
      - run:
          name: "Running self-tests which might segfault."
          command: |
            eval $PRE_TEST_COMMANDS;
            ./meteor self-test \
              --retries ${METEOR_SELF_TEST_RETRIES} \
              --headless
          no_output_timeout: 20m
      - run:
          <<: *really_fail_if_core
      - run:
          <<: *run_save_node_bin
      - store_test_results:
          path: ./tmp/results
      - store_artifacts:
          path: ./tmp/results
      - store_artifacts:
          path: /tmp/core_dumps
      - store_artifacts:
          path: /tmp/memuse.txt

workflows:
  version: 2
  Build and Test:
    jobs:
      - Get Ready
      - SegFaultPlz:
          requires:
            - Get Ready
